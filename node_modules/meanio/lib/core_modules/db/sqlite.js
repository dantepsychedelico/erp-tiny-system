// 'use strict';

var sqlite3 = require('sqlite3'),
    Q = require('q'),
    _ = require('lodash');



function onInstanceAndConfig(defer, meanioinstance, config, done) {
  var defaultConfig = config.clean;
  var db = new sqlite3.Database(defaultConfig.db);

  db.serialize(function() {
    meanioinstance.register('database', {
      run: function(sql, params) {
        var deferred = Q.defer();
        db.run(sql, params || [], function(err) {
          if (err) {
            console.log('\033[31m[ERR:SQL] %s \033[0m', err.message);
            deferred.reject(err);
          } else {
            deferred.resolve();
          }
        });
        return deferred.promise;
      },
      all: function(sql, params) {
        var deferred = Q.defer();
        // note: if row.lenght === 0; row === [];
        db.all(sql, params || [], function(err, row) {
          if (err) {
            console.log('\033[31m[ERR:SQL] %s \033[0m', err.message);
            deferred.reject(err);
          } else {
            deferred.resolve(row);
          }
        });
        return deferred.promise;
      },
      each: function(sql, params) {
        var deferred = Q.defer();
        // note: if row.lenght === 0; callback is never called;
        db.each(sql, params || [], function(err, row) {
          if (err) {
            console.log('\033[31m[ERR:SQL] %s \033[0m', err.message);
            deferred.reject(err);
          } else {
            deferred.resolve(row);
          }
        });
        return deferred.promise;
      }
    });
    defer.resolve();
  });
};

function onInstance(meanioinstance, defer){
  meanioinstance.resolve('defaultconfig', onInstanceAndConfig.bind(null, defer, meanioinstance));
}


module.exports = function (Meanio) {
  Meanio.onInstance(onInstance);
};


